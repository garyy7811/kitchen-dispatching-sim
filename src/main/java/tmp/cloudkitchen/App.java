/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tmp.cloudkitchen;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;
import java.util.Random;
import java.util.function.Function;
import java.util.stream.Collectors;

public class App {
    public static void main(String[] args) throws IOException, InterruptedException {
        ObjectMapper objectMapper = new JsonMapper();
        TypeReference<List<tmp.cloudkitchen.OrderDispatching.Order>> type = new TypeReference<>() {
        };


        tmp.cloudkitchen.OrderDispatching dispatching = new tmp.cloudkitchen.DispatchingAnyOrder();
        logger.info("courierForAnyOrder>>>>>>>>>>>>>>>");
        List<tmp.cloudkitchen.OrderDispatching.Order> orders = objectMapper.readValue(App.class.getClassLoader().getResourceAsStream("data.json"), type);
        Function<OrderDispatching.Order, Long> orderLongFunction = i -> 3000L + new Random().nextInt(12000);
        List<Long> couriers = orders.stream().map(orderLongFunction).collect(Collectors.toList());
        dispatching.dispatch(orders, couriers );
        logger.info("courierForAnyOrder<<<<<<<<<<<<<<<");
    }

    protected static Logger logger = LogManager.getLogger(App.class);

}
